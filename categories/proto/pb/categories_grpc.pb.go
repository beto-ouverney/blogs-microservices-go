// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: categories.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoriesServiceClient is the client API for CategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesServiceClient interface {
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (CategoriesService_GetAllCategoriesClient, error)
	AddCategory(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_AddCategoryClient, error)
}

type categoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesServiceClient(cc grpc.ClientConnInterface) CategoriesServiceClient {
	return &categoriesServiceClient{cc}
}

func (c *categoriesServiceClient) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (CategoriesService_GetAllCategoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[0], "/CategoriesService/GetAllCategories", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceGetAllCategoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoriesService_GetAllCategoriesClient interface {
	Recv() (*GetAllCategoriesResponse, error)
	grpc.ClientStream
}

type categoriesServiceGetAllCategoriesClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceGetAllCategoriesClient) Recv() (*GetAllCategoriesResponse, error) {
	m := new(GetAllCategoriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesServiceClient) AddCategory(ctx context.Context, opts ...grpc.CallOption) (CategoriesService_AddCategoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoriesService_ServiceDesc.Streams[1], "/CategoriesService/AddCategory", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesServiceAddCategoryClient{stream}
	return x, nil
}

type CategoriesService_AddCategoryClient interface {
	Send(*AddCategoryRequest) error
	Recv() (*AddCategoryResponse, error)
	grpc.ClientStream
}

type categoriesServiceAddCategoryClient struct {
	grpc.ClientStream
}

func (x *categoriesServiceAddCategoryClient) Send(m *AddCategoryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *categoriesServiceAddCategoryClient) Recv() (*AddCategoryResponse, error) {
	m := new(AddCategoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoriesServiceServer is the server API for CategoriesService service.
// All implementations must embed UnimplementedCategoriesServiceServer
// for forward compatibility
type CategoriesServiceServer interface {
	GetAllCategories(*GetAllCategoriesRequest, CategoriesService_GetAllCategoriesServer) error
	AddCategory(CategoriesService_AddCategoryServer) error
	mustEmbedUnimplementedCategoriesServiceServer()
}

// UnimplementedCategoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoriesServiceServer struct {
}

func (UnimplementedCategoriesServiceServer) GetAllCategories(*GetAllCategoriesRequest, CategoriesService_GetAllCategoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedCategoriesServiceServer) AddCategory(CategoriesService_AddCategoryServer) error {
	return status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedCategoriesServiceServer) mustEmbedUnimplementedCategoriesServiceServer() {}

// UnsafeCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServiceServer will
// result in compilation errors.
type UnsafeCategoriesServiceServer interface {
	mustEmbedUnimplementedCategoriesServiceServer()
}

func RegisterCategoriesServiceServer(s grpc.ServiceRegistrar, srv CategoriesServiceServer) {
	s.RegisterService(&CategoriesService_ServiceDesc, srv)
}

func _CategoriesService_GetAllCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllCategoriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoriesServiceServer).GetAllCategories(m, &categoriesServiceGetAllCategoriesServer{stream})
}

type CategoriesService_GetAllCategoriesServer interface {
	Send(*GetAllCategoriesResponse) error
	grpc.ServerStream
}

type categoriesServiceGetAllCategoriesServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceGetAllCategoriesServer) Send(m *GetAllCategoriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CategoriesService_AddCategory_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoriesServiceServer).AddCategory(&categoriesServiceAddCategoryServer{stream})
}

type CategoriesService_AddCategoryServer interface {
	Send(*AddCategoryResponse) error
	Recv() (*AddCategoryRequest, error)
	grpc.ServerStream
}

type categoriesServiceAddCategoryServer struct {
	grpc.ServerStream
}

func (x *categoriesServiceAddCategoryServer) Send(m *AddCategoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *categoriesServiceAddCategoryServer) Recv() (*AddCategoryRequest, error) {
	m := new(AddCategoryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoriesService_ServiceDesc is the grpc.ServiceDesc for CategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CategoriesService",
	HandlerType: (*CategoriesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllCategories",
			Handler:       _CategoriesService_GetAllCategories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddCategory",
			Handler:       _CategoriesService_AddCategory_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "categories.proto",
}
