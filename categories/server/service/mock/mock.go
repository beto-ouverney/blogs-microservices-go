// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/beto-ouverney/blogs-microservices/categories/server/model (interfaces: ICategoryModel)

// Package mock_model is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entity "github.com/beto-ouverney/blogs-microservices/categories/server/entity"
	errors "github.com/beto-ouverney/blogs-microservices/categories/server/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockICategoryModel is a mock of ICategoryModel interface.
type MockICategoryModel struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryModelMockRecorder
}

// MockICategoryModelMockRecorder is the mock recorder for MockICategoryModel.
type MockICategoryModelMockRecorder struct {
	mock *MockICategoryModel
}

// NewMockICategoryModel creates a new mock instance.
func NewMockICategoryModel(ctrl *gomock.Controller) *MockICategoryModel {
	mock := &MockICategoryModel{ctrl: ctrl}
	mock.recorder = &MockICategoryModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryModel) EXPECT() *MockICategoryModelMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockICategoryModel) Add(arg0 string) (*entity.Category, *errors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(*errors.CustomError)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockICategoryModelMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockICategoryModel)(nil).Add), arg0)
}

// GetAll mocks base method.
func (m *MockICategoryModel) GetAll() (*[]entity.Category, *errors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]entity.Category)
	ret1, _ := ret[1].(*errors.CustomError)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICategoryModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICategoryModel)(nil).GetAll))
}

// GetByName mocks base method.
func (m *MockICategoryModel) GetByName(arg0 string) (*entity.Category, *errors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*entity.Category)
	ret1, _ := ret[1].(*errors.CustomError)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockICategoryModelMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockICategoryModel)(nil).GetByName), arg0)
}